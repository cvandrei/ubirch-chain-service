akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = DEBUG
  http {
    verbose-error-messages = off
    server {
      idle-timeout = 90s
      request-timeout = 60s
      remote-address-header = on
      # The value of the `Server` header to produce.
      # Set to the empty string to disable rendering of the server header.
      server-header = ubirch-chain-service
    }
  }
}

ubirchChainService {

  gopipelinename = "noName"
  gopipelinename = ${?GO_PIPELINE_NAME_CHAIN}
  gopipelinelabel = "noLabel"
  gopipelinelabel = ${?GO_PIPELINE_LABEL_CHAIN}
  gopipelinerev = "noRev"
  gopipelinerev = ${?GO_REVISION_CHAIN}

  interface = "localhost"
  port = 8100

  akka {
    actorTimeout = 15 // seconds
    numberOfWorkers = 10
  }

  aws {

    awsaccesskey = ${?AWS_ACCESS_KEY_ID}
    awssecretaccesskey = ${?AWS_SECRET_ACCESS_KEY}

    sqs {

      concurrentConsumers = 2
      maxMessagesPerPoll = 10

      queues {

        transactionsIn = "localdev_ubirch_chain_transactions_inbox"
        transactionsOut = "localdev_ubirch_chain_transactions_outbox"

        bigchainDbIn = "localdev_ubirch_chain_bigchainDb_inbox"
        bigchainDbOut = "localdev_ubirch_chain_bigchainDb_outbox"

      }
    }

  }

}
