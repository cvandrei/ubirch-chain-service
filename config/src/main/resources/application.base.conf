akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = DEBUG
  http {
    verbose-error-messages = off
    server {
      idle-timeout = 90s
      request-timeout = 60s
      remote-address-header = on
      # The value of the `Server` header to produce.
      # Set to the empty string to disable rendering of the server header.
      server-header = ubirch-chain-service
    }
  }
}

ubirchChainService {

  gopipelinename = "noName"
  gopipelinename = ${?GO_PIPELINE_NAME_CHAIN}
  gopipelinelabel = "noLabel"
  gopipelinelabel = ${?GO_PIPELINE_LABEL_CHAIN}
  gopipelinerev = "noRev"
  gopipelinerev = ${?GO_REVISION_CHAIN}

  interface = "localhost"
  port = 8100

  akka {
    actorTimeout = 15 // seconds
    numberOfWorkers = 10
  }

  aws {

    awsaccesskey = ${?AWS_ACCESS_KEY_ID}
    awssecretaccesskey = ${?AWS_SECRET_ACCESS_KEY}
    region = "eu-west-1"
    region = ${?AWS_REGION}
    queueOwnerId = "822394622731"
    queueOwnerId = ${?AWS_QUEUE_OWNER_ID}

    sqs {

      concurrentConsumers = 2
      maxMessagesPerPoll = 10

      queues {

        // receive DeviceMsgIn before passing it on to BigchainDb
        deviceDataIn = "local_dev_ubirch_chainservice_device_msg_in"
        // receive DeviceMsgHashIn before passing it on to BigchainDb
        deviceDataHashIn = "local_dev_ubirch_chainservice_device_msg_hash_in"

        // feeds data into BigchainDb
        bigchainDbIn = "local_dev_ubirch_bigchaindb_in"

      }

    }

  }

  anchor {
    schedulerOffset = 10 // seconds
    schedulerOffset = ${?ANCHORING_SCHEDULER_OFFSET_SECONDS}
    interval = 600 // seconds
    interval = ${?ANCHORING_INTERVAL_SECONDS}
    enabled = false
    enabled = ${?ANCHORING_ENABLED}
  }

  mongoBigchain {

    // for uri formats see: https://docs.mongodb.com/manual/reference/connection-string/
    host1 = "mongodb://localhost:27017/bigchain"
    hosts = ${ubirchChainService.mongoBigchain.host1}

    collection {
      bigchain = "bigchain"
    }

  }

  mongoChainService {

    // for uri formats see: https://docs.mongodb.com/manual/reference/connection-string/
    host1 = "mongodb://localhost:27017/chainService"
    hosts = ${ubirchChainService.mongoChainService.host1}

    collection {
      anchors = "anchors"
    }

  }

}

notaryService {
  client {
    url = "http://ubirchnotaryservice-env.us-east-1.elasticbeanstalk.com/v1/notary/notarize"
  }
}
